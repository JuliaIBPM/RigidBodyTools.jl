var documenterSearchIndex = {"docs":
[{"location":"manual/methods/#Index","page":"Index","title":"Index","text":"","category":"section"},{"location":"manual/methods/","page":"Index","title":"Index","text":"DocTestSetup = quote\n  using RigidBodyTools\nend","category":"page"},{"location":"manual/methods/#Shapes","page":"Index","title":"Shapes","text":"","category":"section"},{"location":"manual/methods/","page":"Index","title":"Index","text":"BasicBody\nCircle\nEllipse\nNACA4\nPlate\nRectangle\nSplinedBody\nSquare","category":"page"},{"location":"manual/methods/#RigidBodyTools.BasicBody","page":"Index","title":"RigidBodyTools.BasicBody","text":"BasicBody(x,y[,closuretype=ClosedBody]) <: Body\n\nConstruct a body by simply passing in the x and y coordinate vectors. The last point will be automatically connected to the first point. The coordinate vectors are assumed to be expressed in the body-fixed coordinate system. The optional closuretype specifies whether the body is closed (ClosedBody) or open (OpenBody). If closed, then the first and last points are assumed joined in operations that require neighbor points.\n\n\n\n\n\n","category":"type"},{"location":"manual/methods/#RigidBodyTools.Circle","page":"Index","title":"RigidBodyTools.Circle","text":"Circle(a,n) <: Body\n\nConstruct a circular body with radius a and with n points distributed on the body perimeter.\n\n\n\n\n\nCircle(a,targetsize::Float64) <: Body\n\nConstruct a circular body with radius a with spacing between points set approximately to targetsize.\n\n\n\n\n\n","category":"function"},{"location":"manual/methods/#RigidBodyTools.Ellipse","page":"Index","title":"RigidBodyTools.Ellipse","text":"Ellipse(a,b,n) <: Body\n\nConstruct an elliptical body with semi-major axis a and semi-minor axis b, with n points distributed on the body perimeter.\n\n\n\n\n\n","category":"type"},{"location":"manual/methods/#RigidBodyTools.NACA4","page":"Index","title":"RigidBodyTools.NACA4","text":"NACA4(cam,pos,thick,np,[len=1.0]) <: Body{N}\n\nGenerates points in the shape of a NACA 4-digit airfoil of chord length 1. The relative camber is specified by cam, the position of maximum camber (as fraction of chord) by pos, and the relative thickness by thick. The parameter np specifies the number of points on the upper or lower surface. The optional parameter len specifies the chord length, which defaults to 1.0.\n\nExample\n\njulia> w = Bodies.NACA4(0.0,0.0,0.12);\n\n\n\n\n\n","category":"type"},{"location":"manual/methods/#RigidBodyTools.Plate","page":"Index","title":"RigidBodyTools.Plate","text":"Plate(length,thick,n,[λ=1.0]) <: Body\n\nConstruct a flat plate with length length and thickness thick, with n points distributed on the body perimeter.\n\nThe optional parameter λ distributes the points differently. Values between 0.0 and 1.0 are accepted.\n\nThe constructor Plate(length,n,[λ=1.0]) creates a plate of zero thickness.\n\nAlternatively, either form can be specified with a target spacing in place of n.\n\n\n\n\n\n","category":"type"},{"location":"manual/methods/#RigidBodyTools.Rectangle","page":"Index","title":"RigidBodyTools.Rectangle","text":"Rectangle(a,b,na) <: Body\n\nConstruct a rectangular body with x̃ side half-length a and ỹ side half-length b, with na points distributed on the x̃ side (including both corners). The centroid of the rectangle is placed at the origin (so that the lower left corner is at (-a,-b)).\n\nBy default, points are not placed at the corners, but rather, are shifted by half a segment. This ensures that all normals are perpendicular to the sides. If, instead, the shifted=false flag is added, then points are placed at the corners, shifted clockwise relative to the default by half a segment, and the normal vectors are bisectors between the normals on the adjacent two sides.\n\n\n\n\n\n","category":"type"},{"location":"manual/methods/#RigidBodyTools.SplinedBody","page":"Index","title":"RigidBodyTools.SplinedBody","text":"SplinedBody(X,Δx[,closuretype=ClosedBody]) -> BasicBody\n\nUsing control points in X (assumed to be N x 2, where N is the number of points), create a set of points that are uniformly spaced (with spacing Δx) on a curve that passes through the control points. A cubic parametric spline algorithm is used. If the optional parameter closuretype is set to OpenBody, then the end points are not joined together.\n\n\n\n\n\n","category":"function"},{"location":"manual/methods/#RigidBodyTools.Square","page":"Index","title":"RigidBodyTools.Square","text":"Square(a,na) <: Body\n\nConstruct a square body with side half-length a and with na points distributed on each side (including both corners).\n\n\n\n\n\n","category":"function"},{"location":"manual/methods/#Body-list-functions","page":"Index","title":"Body list functions","text":"","category":"section"},{"location":"manual/methods/","page":"Index","title":"Index","text":"BodyList\ngetrange\nBase.collect(::BodyList)\nBase.sum(::AbstractVector,::BodyList,::Int)\nBase.view(::AbstractVector,::BodyList,::Int)","category":"page"},{"location":"manual/methods/#RigidBodyTools.BodyList","page":"Index","title":"RigidBodyTools.BodyList","text":"BodyList([b1,b2,...])\n\nCreate a list of bodies\n\n\n\n\n\n","category":"type"},{"location":"manual/methods/#RigidBodyTools.getrange","page":"Index","title":"RigidBodyTools.getrange","text":"getrange(bl::BodyList,i::Int) -> Range\n\nReturn the subrange of indices in the global set of surface point data corresponding to body i in a BodyList bl.\n\n\n\n\n\n","category":"function"},{"location":"manual/methods/#Base.collect-Tuple{BodyList}","page":"Index","title":"Base.collect","text":"collect(bl::bodylist) -> Vector{Float64}, Vector{Float64}\n\nCollect the inertial-space coordinates of all of the Lagrange points comprising the bodies in body list bl and return each assembled set of coordinates as a vector.\n\n\n\n\n\n","category":"method"},{"location":"manual/methods/#Base.sum-Tuple{AbstractVector, BodyList, Int64}","page":"Index","title":"Base.sum","text":"sum(f::AbstractVector,bl::BodyList,i::Int) -> Real\n\nCompute a sum of the elements of vector f corresponding to body i in body list bl.\n\n\n\n\n\n","category":"method"},{"location":"manual/methods/#Base.view-Tuple{AbstractVector, BodyList, Int64}","page":"Index","title":"Base.view","text":"view(f::AbstractVector,bl::BodyList,i::Int) -> SubArray\n\nProvide a view of the range of values in vector f corresponding to the Lagrange points of the body with index i in a BodyList bl.\n\n\n\n\n\n","category":"method"},{"location":"manual/methods/#Rigid-transformations","page":"Index","title":"Rigid transformations","text":"","category":"section"},{"location":"manual/methods/","page":"Index","title":"Index","text":"RigidTransform\nRigidTransformList\nBase.vec(::RigidTransform)\nBase.vec(::RigidTransformList)","category":"page"},{"location":"manual/methods/#RigidBodyTools.RigidTransform","page":"Index","title":"RigidBodyTools.RigidTransform","text":"RigidTransform(x::Tuple{Float64,Float64},α::Float64)\n\nConstruct a rigid-body transform operator, with rotation by angle α and translation specified by x. The translation coordinates are specified in the target coordinate system.\n\nThe resulting transform can be used as an operator on pairs of coordinate vectors, x and y, or on bodies. For transformation of bodies, it only overwrites the x and y fields of the body, but leaves the x̃ and ỹ (body coordinates) intact.\n\nThe translation can be provided as either a tuple (x,y) or as a complex number.\n\nConstructors\n\nRigidTransform((x,y),α)\nRigidTransform(u::Vector{Float64})\nRigidTransform(u::NTuple{3,Float64})\nRigidTransform.(u) where u is a collection of vectors or tuples.\n\nExample\n\njulia> body = RigidTransform.Ellipse(0.5,0.1,100)\nElliptical body with 100 points and semi-axes (0.5,0.1)\n   Current position: (0.0,0.0)\n   Current angle (rad): 0.0\n\njulia> T = RigidTransform((1.0,1.0),π/4)\nRigid-body transform\n  Translation: (1.0,1.0)\n  Rotation angle (rad): 0.7853981633974483\n\njulia> T(body)\nElliptical body with 100 points and semi-axes (0.5,0.1)\n   Current position: (1.0,1.0)\n   Current angle (rad): 0.7853981633974483\n\n\n\n\n\n","category":"type"},{"location":"manual/methods/#RigidBodyTools.RigidTransformList","page":"Index","title":"RigidBodyTools.RigidTransformList","text":"RigidTransformList([t1,t2,...])\n\nCreate a list of rigid transforms\n\n\n\n\n\n","category":"type"},{"location":"manual/methods/#Base.vec-Tuple{RigidTransform}","page":"Index","title":"Base.vec","text":"vec(T::RigidTransform) -> Vector{Float64}\n\nReturns a length-3 vector of the form [x,y,α] corresponding to the translation and rotation specified by the given transform T.\n\n\n\n\n\n","category":"method"},{"location":"manual/methods/#Base.vec-Tuple{RigidTransformList}","page":"Index","title":"Base.vec","text":"vec(tl::RigidTransformList) -> Vector{Float64}\n\nReturns a concatenation of length-3 vectors of the form [x,y,α] corresponding to the translation and rotation specified by the given by the list of transforms tl.\n\n\n\n\n\n","category":"method"},{"location":"manual/methods/#Surface-functions","page":"Index","title":"Surface functions","text":"","category":"section"},{"location":"manual/methods/","page":"Index","title":"Index","text":"centraldiff\nBase.diff(::Body)\nBase.diff(::BodyList)\ndlength\ndlengthmid\nBase.length(::Body)\nmidpoints\nnormal\nnormalmid","category":"page"},{"location":"manual/methods/#RigidBodyTools.centraldiff","page":"Index","title":"RigidBodyTools.centraldiff","text":"centraldiff(body::Body) -> Tuple{Vector{Float64},Vector{Float64}}\n\nCompute the circular central differences of coordinates on body body (or on each body in list body).\n\n\n\n\n\ncentraldiff(bl::BodyList[,ref=false]) -> Tuple{Vector{Float64},Vector{Float64}}\n\nCompute the centraldiff on each constituent body in bl.\n\n\n\n\n\n","category":"function"},{"location":"manual/methods/#Base.diff-Tuple{Body}","page":"Index","title":"Base.diff","text":"diff(body::Body[,ref=false]) -> Tuple{Vector{Float64},Vector{Float64}}\n\nCompute the x and y differences of the faces on the perimeter of body body, whose ends are at the current x and y coordinates (in inertial space) of the body (if ref=false), or at the reference x̃ and ỹ coordinates (body-fixed space) if ref=true. Face 1 corresponds to the face between points 1 and 2, for example.\n\nIf body is a BodyList, then it computes the differences separately on each constituent body.\n\n\n\n\n\n","category":"method"},{"location":"manual/methods/#Base.diff-Tuple{BodyList}","page":"Index","title":"Base.diff","text":"diff(bl::BodyList[,ref=false]) -> Tuple{Vector{Float64},Vector{Float64}}\n\nCompute the diff on each constituent body in bl.\n\n\n\n\n\n","category":"method"},{"location":"manual/methods/#RigidBodyTools.dlength","page":"Index","title":"RigidBodyTools.dlength","text":"dlength(body::Body/BodyList) -> Vector{Float64}\n\nCompute the lengths of the faces on the perimeter of body body, whose ends are at the current x and y coordinates (in inertial space) of the body. Face 1 corresponds to the face between points 1 and 2, for example. For an OpenBody, this provides a vector that is one element shorter than the number of points, to ensure that sum(dlength(body)) is equal to the arclength of the body.\n\n\n\n\n\n","category":"function"},{"location":"manual/methods/#RigidBodyTools.dlengthmid","page":"Index","title":"RigidBodyTools.dlengthmid","text":"dlengthmid(body::Body/BodyList) -> Vector{Float64}\n\nCompute the lengths of the faces formed between the face midpoints on the perimeter of body body. The indexing of these midpoint faces is consistent with that of the regular vertex points adjacent to both midpoints. Midpoint face 2 corresponds to the face between midpoints 1 and 2, for example. For an OpenBody, the lengths for the first and last points are calculated to the adjoining midpoints, to ensure that sum(dlength(body)) is equal to the arclength of the body.\n\n\n\n\n\n","category":"function"},{"location":"manual/methods/#Base.length-Tuple{Body}","page":"Index","title":"Base.length","text":"length(body::Body)\n\nReturn the number of points on the body perimeter\n\n\n\n\n\n","category":"method"},{"location":"manual/methods/#RigidBodyTools.midpoints","page":"Index","title":"RigidBodyTools.midpoints","text":"midpoints(body::Body[,ref=false]) -> Tuple{Vector{Float64},Vector{Float64}}\n\nCompute the x and y midpoints of the faces on the perimeter of body body, whose ends are at the current x and y coordinates (in inertial space) of the body (if ref=false), or at the reference x̃ and ỹ coordinates (body-fixed space) if ref=true. Face 1 corresponds to the face between points 1 and 2, for example.\n\nIf body is a BodyList, then it computes the differences separately on each constituent body.\n\n\n\n\n\nmidpoints(bl::BodyList[,ref=false]) -> Tuple{Vector{Float64},Vector{Float64}}\n\nCompute the midpoints on each constituent body in bl.\n\n\n\n\n\n","category":"function"},{"location":"manual/methods/#RigidBodyTools.normal","page":"Index","title":"RigidBodyTools.normal","text":"normal(body::Body/BodyList) -> Tuple{Vector{Float64},Vector{Float64}}\n\nCompute the current normals in inertial components (if ref=false) or body-   fixed components (if ref=true) of the faces on the perimeter of body body, whose ends are at the current x and y coordinates (in inertial space) of the body. Face 1 corresponds to the face between points 1 and 2, for example. For an OpenBody, this provides a vector that is one element shorter than the number of points.\n\n\n\n\n\n","category":"function"},{"location":"manual/methods/#RigidBodyTools.normalmid","page":"Index","title":"RigidBodyTools.normalmid","text":"normalmid(body::Body/BodyList[,ref=false]) -> Tuple{Vector{Float64},Vector{Float64}}\n\nCompute the current normals in inertial components (if ref=false) or body-   fixed components (if ref=true) of the faces formed between midpoints on the perimeter of body body (or each body in list body). For an OpenBody, the normals for the first and last points are calculated for the face adjoining with the adjacent midpoints.\n\n\n\n\n\n","category":"function"},{"location":"manual/methods/#Motion-functions","page":"Index","title":"Motion functions","text":"","category":"section"},{"location":"manual/methods/","page":"Index","title":"Index","text":"BasicDirectMotion\nRigidBodyMotion\nMotionList\nmotion_state\nmotion_velocity\nsurface_velocity!\nsurface_velocity","category":"page"},{"location":"manual/methods/#RigidBodyTools.BasicDirectMotion","page":"Index","title":"RigidBodyTools.BasicDirectMotion","text":"BasicDirectMotion(u::Vector{Float64},v::Vector{Float64})\n\nCreate an instance of basic directly-specified (constant) velocity, to be associated with a body whose length is the same as u and v.\n\n\n\n\n\n","category":"type"},{"location":"manual/methods/#RigidBodyTools.RigidBodyMotion","page":"Index","title":"RigidBodyTools.RigidBodyMotion","text":"RigidBodyMotion <: AbstractMotion\n\nA type to store the body's current kinematics\n\nFields\n\nc: current centroid position (relative to initial position)\nċ: current centroid velocity\nc̈: current centroid acceleration\nα: current angle (relative to initial angle)\nα̇: current angular velocity\nα̈: current angular acceleration\nkin: a Kinematics structure\n\nThe first six fields are meant as a cache of the current kinematics while the kin field can be used to find the plate kinematics at any time.\n\n\n\n\n\n","category":"type"},{"location":"manual/methods/#RigidBodyTools.MotionList","page":"Index","title":"RigidBodyTools.MotionList","text":"MotionList([m1,m2,...])\n\nCreate a list of motions\n\n\n\n\n\n","category":"type"},{"location":"manual/methods/#RigidBodyTools.motion_state","page":"Index","title":"RigidBodyTools.motion_state","text":"motion_state(b::Body,m::RigidBodyMotion)\n\nReturn the current state vector of body b associated with rigid body motion m. It returns the current coordinates of the body centroid and the angle of the body.\n\n\n\n\n\nmotion_state(b::Body,m::DirectlySpecifiedMotion)\n\nReturn the current state vector of body b associated with direct motion m. It returns the concatenated coordinates of the body surface (in the inertial coordinate system).\n\n\n\n\n\nmotion_state(bl::BodyList,ml::MotionList)\n\nReturn the current state vector of body list bl associated with motion list ml. It returns the aggregated state vectors of each body.\n\n\n\n\n\n","category":"function"},{"location":"manual/methods/#RigidBodyTools.motion_velocity","page":"Index","title":"RigidBodyTools.motion_velocity","text":"motion_velocity(b::Body,m::RigidBodyMotion,t::Real)\n\nReturn the velocity components (as a vector) of a RigidBodyMotion at the given time t.\n\n\n\n\n\nmotion_velocity(b::Body,m::DirectlySpecifiedMotion,t::Real)\n\nReturn the velocity components (as a vector) of a DirectlySpecifiedMotion at the given time t.\n\n\n\n\n\nmotion_velocity(bl::BodyList,ml::MotionList,t::Real) -> Vector\n\nReturn the aggregated velocity components (as a vector) of a MotionList at the given time t.\n\n\n\n\n\n","category":"function"},{"location":"manual/methods/#RigidBodyTools.surface_velocity!","page":"Index","title":"RigidBodyTools.surface_velocity!","text":"surface_velocity!(u::AbstractVector{Float64},v::AbstractVector{Float64},\n             body::Body,motion::AbstractMotion,t::Real)\n\nAssign the components of body velocity u and v (in inertial coordinate system) at surface positions described by coordinates inertial coordinates in body in body at time t, based on supplied motions in the motion for the body.\n\n\n\n\n\nsurface_velocity!(u::AbstractVector{Float64},v::AbstractVector{Float64},\n                 x::AbstractVector{Float64},y::AbstractVector{Float64},\n                 xc::Real,yc::Real,α::Real,\n                 motion::RigidBodyMotion,t::Real)\n\nAssign the components of rigid body velocity u and v (in inertial coordinate system) at surface positions described by coordinates x, y (also in inertial coordinate system) at time t, based on supplied motion motion for the body.\n\n\n\n\n\nsurface_velocity!(u::AbstractVector{Float64},v::AbstractVector{Float64},\n                 b::Body,motion::BasicDirectMotion,t::Real)\n\nAssign the components of velocity u and v (in inertial coordinate system) at surface positions described by points in body b (also in inertial coordinate system) at time t, based on supplied motion motion for the body.\n\n\n\n\n\nsurface_velocity!(u::AbstractVector{Float64},v::AbstractVector{Float64},\n                 bl::BodyList,ml::MotionList,t::Real)\n\nAssign the components of velocity u and v (in inertial coordinate system) at surface positions described by coordinates inertial coordinates in each body in bl at time t, based on supplied motions in the MotionList ml for each body.\n\n\n\n\n\n","category":"function"},{"location":"manual/methods/#RigidBodyTools.surface_velocity","page":"Index","title":"RigidBodyTools.surface_velocity","text":"surface_velocity(x::AbstractVector{Float64},y::AbstractVector{Float64},\n                xc::Real,yc::Real,α::Real,motion::RigidBodyMotion,t::Real)\n\nReturn the components of rigid body velocities (in inertial components) at surface positions described by coordinates x, y (also in inertial coordinate system) at time t, based on supplied motion motion for the body.\n\n\n\n\n\nsurface_velocity(bl::BodyList,ml::MotionList,t::Real)\n\nReturn the components of rigid body velocity (in inertial coordinate system) at surface positions described by coordinates inertial coordinates in each body in bl at time t, based on supplied motions in the MotionList ml for each body.\n\n\n\n\n\nsurface_velocity(body::Body,motion::AbstractMotion,t::Real)\n\nReturn the components of rigid body velocity (in inertial coordinate system) at surface positions described by coordinates inertial coordinates in body in body at time t, based on supplied motions in motion for the body.\n\n\n\n\n\n","category":"function"},{"location":"manual/methods/#Rigid-body-kinematics-types","page":"Index","title":"Rigid body kinematics types","text":"","category":"section"},{"location":"manual/methods/","page":"Index","title":"Index","text":"Kinematics\nOscillation\nOscillationX\nOscillationY\nOscillationXY\nPitchHeave\nPitchup\nRotationalOscillation\nSwitchedKinematics","category":"page"},{"location":"manual/methods/#RigidBodyTools.Kinematics","page":"Index","title":"RigidBodyTools.Kinematics","text":"An abstract type for types that takes in time and returns (c, ċ, c̈, α, α̇, α̈).\n\n\n\n\n\n","category":"type"},{"location":"manual/methods/#RigidBodyTools.Oscillation","page":"Index","title":"RigidBodyTools.Oscillation","text":"Oscillation(Ux,Uy,α̇₀,ax,ay,Ω,Ax,Ay,ϕx,ϕy,α₀,Δα,ϕα) <: Kinematics\n\nSet 2-d oscillatory kinematics. This general constructor sets up motion of a rotational axis, located at ax, ay (expressed relative to the body centroid, in   a body-fixed coordinate system). The rotational axis motion is described by\n\nx(t) = U_x t + A_xsin(Omega t - phi_x) quad y(t) = U_y t + A_ysin(Omega t - phi_y)  quad alpha(t) = alpha_0 + dotalpha_0 t +  Deltaalpha sin(Omega t - phi_alpha)\n\n\n\n\n\n","category":"type"},{"location":"manual/methods/#RigidBodyTools.OscillationX","page":"Index","title":"RigidBodyTools.OscillationX","text":"OscillationX(Ux,Ω,Ax,ϕx)\n\nSet oscillatory kinematics in the x direction, of the form\n\nx(t) = U_x t + A_x sin(Omega t - phi_x)\n\n\n\n\n\n","category":"function"},{"location":"manual/methods/#RigidBodyTools.OscillationY","page":"Index","title":"RigidBodyTools.OscillationY","text":"OscillationY(Uy,Ω,Ay,ϕy)\n\nSet oscillatory kinematics in the y direction, of the form\n\ny(t) = U_y t + A_y sin(Omega t - phi_y)\n\n\n\n\n\n","category":"function"},{"location":"manual/methods/#RigidBodyTools.OscillationXY","page":"Index","title":"RigidBodyTools.OscillationXY","text":"OscillationXY(Ux,Uy,Ω,Ax,ϕx,Ay,ϕy)\n\nSet oscillatory kinematics in the x and y directions, of the form\n\nx(t) = U_x t + A_x sin(Omega t - phi_x) quad y(t) = U_y t + A_y sin(Omega t - phi_y)\n\n\n\n\n\n","category":"function"},{"location":"manual/methods/#RigidBodyTools.PitchHeave","page":"Index","title":"RigidBodyTools.PitchHeave","text":"PitchHeave(U₀,a,Ω,α₀,Δα,ϕp,A,ϕh)\n\nCreate oscillatory pitching and heaving kinematics of a pitch axis at location a (expressed relative to the centroid in the tildex direction of the body-fixed coordinate system), of the form (in inertial coordinates)\n\nx(t) = U_0 quad y(t) = Asin(Omega t - phi_h)  quad alpha(t) = alpha_0 + Deltaalpha sin(Omega t - phi_p)\n\n\n\n\n\n","category":"function"},{"location":"manual/methods/#RigidBodyTools.Pitchup","page":"Index","title":"RigidBodyTools.Pitchup","text":"Pitchup(U₀,a,K,α₀,t₀,Δα,ramp=EldredgeRamp(11.0)) <: Kinematics\n\nKinematics describing a pitch-ramp motion (horizontal translation with rotation) starting at time t_0 about an axis at a (expressed relative to the centroid, in the tildex   direction in the body-fixed coordinate system), with translational velocity U₀ in the inertial x direction, initial angle alpha_0, dimensionless angular velocity K = dotalpha_0c2U_0, and angular change Deltaalpha. The optional ramp argument is assumed to be given by the smooth ramp EldredgeRamp with a smoothness factor of 11 (larger values lead to sharper transitions on/off the ramp), but this can be replaced by another Eldredge ramp with a different value or a ColoniusRamp.\n\n\n\n\n\n","category":"type"},{"location":"manual/methods/#RigidBodyTools.RotationalOscillation","page":"Index","title":"RigidBodyTools.RotationalOscillation","text":"RotationalOscillation(ax,ay,Ω,α₀,α̇₀,Δα,ϕα)\n\nSet oscillatory rotational kinematics about an axis located at ax, ay (expressed relative to the body centroid, in a body-fixed coordinate system), of the form\n\nalpha(t) = alpha_0 + dotalpha_0 t + Deltaalpha sin(Omega t - phi_alpha)\n\n\n\n\n\nRotationalOscillation(Ω,Δα,ϕα)\n\nSet oscillatory rotational kinematics about the centroid of the form\n\nalpha(t) = Deltaalpha sin(Omega t - phi_alpha)\n\n\n\n\n\n","category":"function"},{"location":"manual/methods/#RigidBodyTools.SwitchedKinematics","page":"Index","title":"RigidBodyTools.SwitchedKinematics","text":"SwitchedKinematics <: Kinematics\n\nModulates a given set of kinematics between simple on/off states. The velocity specified by the given kinematics is toggled on/off.\n\nFields\n\nt_on\ntime at which the kinematics should be turned on\nt_off\ntime at which the kinematics should be turned off\nkin\nkinematics to be followed in the on state\noff\n\n\n\n\n\n","category":"type"},{"location":"#RigidBodyTools.jl","page":"Home","title":"RigidBodyTools.jl","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Tools for creating, moving, and discretizing rigid bodies","category":"page"},{"location":"","page":"Home","title":"Home","text":"The purpose of this package is to provide tools for rigid bodies with point-discretized surfaces. It includes methods for","category":"page"},{"location":"","page":"Home","title":"Home","text":"a library of surface shape definitions and associated point discretizations\ncalculation of geometric properties\nrigid-body motion and transformation of surface points\ncollections of multiple rigid bodies","category":"page"},{"location":"#Installation","page":"Home","title":"Installation","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"This package works on Julia 1.0 and above and is registered in the general Julia registry. To install from the REPL, type e.g.,","category":"page"},{"location":"","page":"Home","title":"Home","text":"] add RigidBodyTools","category":"page"},{"location":"","page":"Home","title":"Home","text":"Then, in any version, type","category":"page"},{"location":"","page":"Home","title":"Home","text":"julia> using RigidBodyTools","category":"page"},{"location":"","page":"Home","title":"Home","text":"The plots in this documentation are generated using Plots.jl. You might want to install that, too, to follow the examples.","category":"page"}]
}
